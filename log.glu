let { (<|) } = import! std.function
let { semigroup } = import! std.string
let { (<>) } = import! std.semigroup
let { List, foldable } = import! std.list
let { foldr } = import! std.foldable
let { find, split_at } = import! std.string

let { (::) } = import! util.list
let prim = import! util.log.prim

let interpolate msg value_str_list =
    let len list = (foldr (\_ r -> r + 1) 0 list)

    let split msg =
        match find msg "{}" with
        | None -> msg :: Nil
        | Some(index) ->
            let (left, right) = split_at msg index
            let (_,  right) = split_at msg (index + 2)
            left :: split right

    let intersperse str_list value_str_list =
        match (str_list, value_str_list) with
        | (Nil, Nil) -> Nil
        | (Nil, Cons x xs ) -> x :: intersperse Nil xs
        | (Cons x Nil, _) -> x :: Nil
        | (Cons x xs, Nil) -> x :: "{}" :: intersperse xs Nil
        | (Cons x xs, Cons y ys) -> x :: y :: intersperse xs ys

    let split_msg = split msg
    let len_split = (len split_msg) - 1
    let len_value_str_list = len value_str_list

    let _ = if len_split /= len_value_str_list
        then prim.warn (
            "The number of placeholders in the log message: "
            <> show len_split <>
            ", does not match the number of values supplied: "
            <> show len_value_str_list <>
            "."
        )
        else ()

    foldr (<>) "" <| intersperse split_msg value_str_list


let log1 log_func msg a : (String -> ()) -> [Show a] -> String -> a -> () =
    log_func <| interpolate msg <| (show a)::Nil

let log2 log_func msg a b : (String -> ()) -> [Show a] -> [Show b] -> String ->  a -> b -> () =
    log_func <| interpolate msg <| (show a)::(show b)::Nil

let log3 log_func msg a b c : (String -> ()) -> [Show a] -> [Show b] -> [Show c] -> String -> a -> b -> c -> () =
    log_func <| interpolate msg <| (show a)::(show b)::(show c)::Nil


let trace = prim.trace
let trace1 = log1 trace
let trace2 = log2 trace
let trace3 = log3 trace

let debug = prim.debug
let debug1 = log1 debug
let debug2 = log2 debug
let debug3 = log3 debug

let info = prim.info
let info1 = log1 info
let info2 = log2 info
let info3 = log3 info

let warn = prim.warn
let warn1 = log1 warn
let warn2 = log2 warn
let warn3 = log3 warn

let error = prim.error
let error1 = log1 error
let error2 = log2 error
let error3 = log3 error


let log_pred log_func pred msg =
    if pred
    then log_func msg
    else ()

let log1_pred log_func pred msg a : [Show a] -> (String -> a -> ()) -> Bool -> String -> a -> () =
    if pred
    then log_func msg a
    else ()

let log2_pred log_func pred msg a b : [Show a] -> [Show b]-> (String -> a -> b -> ()) -> Bool -> String -> a -> b -> () =
    if pred
    then log_func msg a b
    else ()

let log3_pred log_func pred msg a b c : [Show a] -> [Show b]-> [Show c] -> (String -> a -> b -> c -> ()) -> Bool -> String -> a -> b -> c -> () =
    if pred
    then log_func msg a b c
    else ()


let trace_pred = log_pred trace
let trace1_pred : [Show a] -> Bool -> String -> a -> () = log1_pred trace1
let trace2_pred : [Show a] -> [Show b] -> Bool -> String -> a -> b -> () = log2_pred trace2
let trace3_pred : [Show a] -> [Show b]-> [Show c] -> Bool -> String -> a -> b -> c -> () = log3_pred trace3

let debug_pred = log_pred debug
let debug1_pred : [Show a] -> Bool -> String -> a -> () = log1_pred debug1
let debug2_pred : [Show a] -> [Show b] -> Bool -> String -> a -> b -> () = log2_pred debug2
let debug3_pred : [Show a] -> [Show b]-> [Show c] -> Bool -> String -> a -> b -> c -> () = log3_pred debug3

let info_pred = log_pred info
let info1_pred : [Show a] -> Bool -> String -> a -> () = log1_pred info1
let info2_pred : [Show a] -> [Show b] -> Bool -> String -> a -> b -> () = log2_pred info2
let info3_pred : [Show a] -> [Show b]-> [Show c] -> Bool -> String -> a -> b -> c -> () = log3_pred info3

let warn_pred = log_pred warn
let warn1_pred : [Show a] -> Bool -> String -> a -> () = log1_pred warn1
let warn2_pred : [Show a] -> [Show b] -> Bool -> String -> a -> b -> () = log2_pred warn2
let warn3_pred : [Show a] -> [Show b]-> [Show c] -> Bool -> String -> a -> b -> c -> () = log3_pred warn3

let error_pred = log_pred error
let error1_pred : [Show a] -> Bool -> String -> a -> () = log1_pred error1
let error2_pred : [Show a] -> [Show b] -> Bool -> String -> a -> b -> () = log2_pred error2
let error3_pred : [Show a] -> [Show b]-> [Show c] -> Bool -> String -> a -> b -> c -> () = log3_pred error3


{
    interpolate,

    trace,
    trace1,
    trace2,
    trace3,

    debug,
    debug1,
    debug2,
    debug3,

    info,
    info1,
    info2,
    info3,

    warn,
    warn1,
    warn2,
    warn3,

    error,
    error1,
    error2,
    error3,

    trace_pred,
    trace1_pred,
    trace2_pred,
    trace3_pred,

    debug_pred,
    debug1_pred,
    debug2_pred,
    debug3_pred,

    info_pred,
    info1_pred,
    info2_pred,
    info3_pred,

    warn_pred,
    warn1_pred,
    warn2_pred,
    warn3_pred,

    error_pred,
    error1_pred,
    error2_pred,
    error3_pred,
}
